name: test

on:
  pull_request:
    branches: 'master'
    paths:
      - '.github/workflows/test.yml'
      - 'assets/**'
      - 'patchs/**'
      - 'Dockerfile'
  push:
    branches: 'master'
    paths:
      - '.github/workflows/test.yml'
      - 'assets/**'
      - 'patchs/**'
      - 'Dockerfile'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        # https://github.com/actions/checkout
        name: Checkout
        uses: actions/checkout@v1
      -
        name: Prepare
        id: prepare
        run: |
          echo ::set-output name=build_tag::test
          echo ::set-output name=container_name::snmpd
          echo ::set-output name=running_timeout::120
          echo ::set-output name=running_log_check::NET-SNMP version
      -
        name: Docker Build
        run: |
          docker build --tag ${{ steps.prepare.outputs.build_tag }} --file ${{ matrix.docker_file }} Dockerfile .
      -
        name: Start container
        run: |
          docker run -d --name ${{ steps.prepare.outputs.container_name }} \
           --privileged \
           -v "/:/rootfs:ro" \
           ${{ steps.prepare.outputs.build_tag }}
      -
        name: Test run
        run: |
          TIMEOUT=$((SECONDS + ${{ steps.prepare.outputs.running_timeout }}))
          while read LOGLINE; do
            echo ${LOGLINE}
            if [[ ${LOGLINE} == *"${{ steps.prepare.outputs.running_log_check }}"* ]]; then
              echo "🎉 Container up!"
              break
            fi
            if [[ $SECONDS -gt ${TIMEOUT} ]]; then
              >&2 echo "❌ Failed to run ${{ steps.prepare.outputs.container_name }} container"
              docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
              exit 1
            fi
          done < <(docker logs -f ${{ steps.prepare.outputs.container_name }} 2>&1)

          CONTAINER_STATUS=$(docker container inspect --format "{{.State.Status}}" ${{ steps.prepare.outputs.container_name }})
          if [[ ${CONTAINER_STATUS} != "running" ]]; then
            >&2 echo "❌ Container ${{ steps.prepare.outputs.container_name }} returned status '$CONTAINER_STATUS'"
            docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
            exit 1
          fi
          docker rm -f ${{ steps.prepare.outputs.container_name }} > /dev/null 2>&1 || true
